# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
    python: circleci/python@1.2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
    python:
        # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
        docker:
            - image: cimg/python:3.10.0
        # Checkout the code as the first step. This is a dedicated CircleCI step.
        steps:
            - checkout
            - python/install-packages:
                pkg-manager: pip
                # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
                pip-dependency-file: requirements_dev.txt # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
            # Format
            - run: echo "Checking formatting ..."
            - run: black --check .
            - run: isort --check .
            # Build
            - run: echo "Building ..."
            - run: python --version
            # Test
            - run: echo "Testing toy problems..."
            - run: pytest --cov $(pwd)/implementations/ --cov-branch $(pwd)/implementations/ --cov-report term-missing --cov-fail-under 100
            - run: echo "Testing markdown parser..."
            - run: pytest --cov $(pwd)/markdown-parser/ --cov-branch $(pwd)/markdown-parser/ --cov-report term-missing --cov-fail-under 80
    go_build_format_test:
        docker:
            - image: cimg/go:1.17.5
        # Checkout the code as the first step. This is a dedicated CircleCI step.
        steps:
            - checkout
            # Format
            - run: echo "Checking formatting ..."
            - run: gofmt -l .
            # Build and Test
            - run: echo "Building..."
            - run: $(pwd)/circleCI.sh --go
            - run: echo "Testing..."
            - run: go test -cover $(pwd)/implementations/go/**/*.go
    rust:
        docker:
            - image: cimg/rust:1.57.0
        steps:
            - checkout
            # Format
            - run: echo "Checking formatting ..."
            - run: rustfmt --check $(pwd)/implementations/rust/**/*.rs
            # Build and Test
            - run: echo "Building and Testin..."
            - run: $(pwd)/circleCI.sh --rust
    java:
        docker:
            - image: cimg/openjdk:17.0.0
        steps:
            - checkout
            - run: echo "Compiling, building, and testing ..."
            - run: $(pwd)/circleCI.sh --java
    c:
        docker:
            - image: cimg/base:2021.12
        steps:
            - checkout
            # No format check as C default formatting is inconsistent with the rest and I don't like it.
            - run: echo "Compiling, building, and testing ..."
            - run: $(pwd)/circleCI.sh --c
    # haxe:
    #     docker:
    #         - image: cimg/base:2021.12
    #     steps:
    #         - checkout
    #         - run: wget https://github.com/HaxeFoundation/haxe/releases/download/4.2.4/haxe-4.2.4-linux64.tar.gz
    #         - run: tar xfvz haxe-4.2.4-linux64.tar.gz
    #         - run: wget https://github.com/HaxeFoundation/neko/releases/download/v2-3-0/neko-2.3.0-linux64.tar.gz
    #         - run: tar xfvz neko-2.3.0-linux64.tar.gz
    #         - run: sudo ln -s $(pwd)/neko-2.3.0-linux64/neko /bin/neko
    #         - run: sudo apt install haxe -y
    #         - run: haxelib install utest
    #         - run: haxelib install formatter
    #         - run: echo "Checking formatting, compiling, building, and testing ..."
    #         - run: ./circleCI.sh --haxe

# Invoke jobs via workflows
workflows:
    build_and_test:
        jobs:
            - python
            - go
            - rust
            - java
            - c
            # - haxe
