# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
    python: circleci/python@1.2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
    python_build_format_test:
        # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
        docker:
            - image: cimg/python:3.10.0
        # Checkout the code as the first step. This is a dedicated CircleCI step.
        steps:
            - checkout
            - python/install-packages:
                pkg-manager: pip
                # app-dir: ~/project/package-directory/  # If your requirements.txt isn't in the root directory.
                pip-dependency-file: requirements_dev.txt # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
            # Format
            - run: echo "Checking formatting ..."
            - run: black --check .
            # Build
            - run: echo "Building ..."
            - run: python --version
            # Test
            - run: echo "Testing ..."
            - run: pytest --cov . --cov-branch . --cov-report term-missing --cov-fail-under 100
    go_build_format_test:
        docker:
            - image: cimg/go:1.17.5
        # Checkout the code as the first step. This is a dedicated CircleCI step.
        steps:
            - checkout
            # Format
            - run: echo "Checking formatting ..."
            - run: gofmt -l .
            # Build
            - run: echo "Building ..."
            - run: go run implementations/go/sieve/sieve_run.go implementations/go/sieve/sieve.go
            # Test
            - run: echo "Testing ..."
            - run: go test -cover implementations/go/**/*.go
    rust_build_format_test:
        docker:
            - image: cimg/rust:1.57.0
        steps:
            - checkout
            # Format
            - run: echo "Checking formatting ..."
            - run: rustfmt --check ./implementations/rust/**/*.rs
            # Build
            - run: echo "Building ..."
            - run: rustc ./implementations/rust/sieve/sieve_run.rs -o ./implementations/rust/sieve/sieve_run
            - run: ./implementations/rust/sieve/sieve_run
            # Test
            - run: echo "Testing ..."
            - run: rustc --test ./implementations/rust/sieve/sieve_test.rs -o ./implementations/rust/sieve/sieve_test
            - run: ./implementations/rust/sieve/sieve_test

# Invoke jobs via workflows
workflows:
    build_and_test:
        jobs:
            - python_build_format_test
            - go_build_format_test
            - rust_build_format_test
